{ lib, ... }:
let
  inherit (lib) types mkOption;
  inherit (lib.types)
    nullOr
    listOf
    oneOf
    attrsOf
    ;
  localTypes = {
    cmd = (import ./cmd.nix) { inherit lib; };
    deps = (import ./deps.nix) { inherit lib; };
    precondition = (import ./precondition.nix) { inherit lib; };
    requires_obj = (import ./requires_obj.nix) { inherit lib; };
    shell-set = (import ./shell-set.nix) { inherit lib; };
    shell-shopt = (import ./shell-shopt.nix) { inherit lib; };
    variable = (import ./variable.nix) { inherit lib; };
  };
in
oneOf [
  # String command
  types.str
  (listOf types.str)

  (types.submodule {
    options = {
      cmds = mkOption {
        type = listOf localTypes.cmd;
        description = "A list of commands to be executed.";
        default = [ ];
      };

      cmd = mkOption {
        type = nullOr localTypes.cmd;
        description = "The command to be executed.";
        default = null;
      };

      deps = mkOption {
        type = listOf localTypes.deps;
        description = "Task dependencies";
        default = [ ];
      };

      desc = mkOption {
        type = nullOr types.str;
        description = "Short description shown in `--list`";
        default = null;
      };

      summary = mkOption {
        type = nullOr types.str;
        description = "Detailed description shown in `--summary`";
        default = null;
      };

      prompt = mkOption {
        type = oneOf [
          types.str
          (listOf types.str)
        ];
        description = "Prompts shown before task execution";
        default = [ ];
      };

      aliases = mkOption {
        type = listOf types.str;
        description = "Alternative names for the task";
        default = [ ];
      };

      sources = mkOption {
        type = listOf (oneOf [
          types.str
          (types.submodule {
            options = {
              exclude = mkOption { type = types.str; };
            };
          })
        ]);
        description = "A list of sources to check before running this task. Relevant for `checksum` and `timestamp` methods. Can be file paths or star globs.";
        default = [ ];
      };

      generates = mkOption {
        type = listOf (oneOf [
          types.str
          (types.submodule {
            options = {
              exclude = mkOption { type = types.str; };
            };
          })
        ]);
        description = "A list of files meant to be generated by this task. Relevant for `timestamp` method. Can be file paths or star globs.";
        default = [ ];
      };

      status = mkOption {
        type = listOf types.str;
        description = "A list of commands to check if this task should run. The task is skipped otherwise. This overrides `method`, `sources` and `generates`.";
        default = [ ];
      };

      preconditions = mkOption {
        type = listOf localTypes.precondition;
        description = "A list of commands to check if this task should run. If a condition is not met, the task will error.";
        default = [ ];
      };

      dir = mkOption {
        type = nullOr types.str;
        description = "The directory in which this task should run. Defaults to the current working directory.";
        default = null;
      };

      set = mkOption {
        type = localTypes.shell-set;
        description = "Enables POSIX shell options for all of a task's commands. See https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html";
        default = [ ];
      };

      shopt = mkOption {
        type = localTypes.shell-shopt;
        description = "Enables Bash shell options for all of a task's commands. See https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html";
        default = [ ];
      };

      vars = mkOption {
        type = attrsOf localTypes.variable;
        description = "A set of variables that can be used in the task";
        default = { };
      };

      env = mkOption {
        type = attrsOf localTypes.variable;
        description = "A set of environment variables that will be made available to shell commands.";
        default = { };
      };

      dotenv = mkOption {
        type = listOf types.str;
        description = "A list of `.env` file paths to be parsed.";
        default = [ ];
      };

      silent = mkOption {
        type = nullOr types.bool;
        description = "Hides task name and command from output. The command's output will still be redirected to `STDOUT` and `STDERR`. When combined with the `--list` flag, task descriptions will be hidden.";
        defaultText = "false";
        default = null;
      };

      interactive = mkOption {
        type = nullOr types.bool;
        description = "Tells task that the command is interactive.";
        defaultText = "false";
        default = null;
      };

      internal = mkOption {
        type = nullOr types.bool;
        description = "Stops a task from being callable on the command line. It will also be omitted from the output when used with `--list`.";
        defaultText = "false";
        default = null;
      };

      method = mkOption {
        type = nullOr (
          types.enum [
            "checksum"
            "timestamp"
            "none"
          ]
        );
        description = "Defines which method is used to check the task is up-to-date. `timestamp` will compare the timestamp of the sources and generates files. `checksum` will check the checksum (You probably want to ignore the .task folder in your .gitignore file). `none` skips any validation and always run the task.";
        defaultText = "none";
        default = null;
      };

      prefix = mkOption {
        type = nullOr types.str;
        description = "Defines a string to prefix the output of tasks running in parallel. Only used when the output mode is `prefixed`.";
        default = null;
      };

      ignore_error = mkOption {
        type = nullOr types.bool;
        description = "Continue execution if errors happen while executing commands.";
        defaultText = "false";
        default = null;
      };

      run = mkOption {
        type = nullOr (
          types.enum [
            "always"
            "once"
            "when_changed"
          ]
        );
        description = "Specifies whether the task should run again or not if called more than once. Available options: `always`, `once` and `when_changed`.";
        defaultText = "always";
        default = null;
      };

      platforms = mkOption {
        type = listOf types.str;
        description = "Specifies which platforms the task should be run on.";
        default = [ ];
      };

      requires = mkOption {
        type = localTypes.requires_obj;
        description = "A list of variables which should be set if this task is to run, if any of these variables are unset the task will error and not run.";
        default = { };
      };

      watch = mkOption {
        type = nullOr types.bool;
        description = "Configures a task to run in watch mode automatically.";
        defaultText = "false";
        default = null;
      };
    };
  })
]
