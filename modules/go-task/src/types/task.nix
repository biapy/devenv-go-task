{ lib, ... }:
lib.types.attrsOf (
  lib.types.submodule {
    options = {
      desc = lib.mkOption {
        type = lib.types.nullOr lib.types.str;
        description = "Task description";
        default = null;
      };

      cmds = lib.mkOption {
        type = lib.types.listOf lib.types.str;
        description = "Commands to run for this task";
        default = [ ];
      };

      deps = lib.mkOption {
        type = lib.types.listOf lib.types.str;
        description = "Task dependencies";
        default = [ ];
      };

      sources = lib.mkOption {
        type = lib.types.listOf lib.types.str;
        description = "Source files that trigger task execution";
        default = [ ];
      };

      generates = lib.mkOption {
        type = lib.types.listOf lib.types.str;
        description = "Files generated by this task";
        default = [ ];
      };

      vars = lib.mkOption {
        type = lib.types.attrsOf lib.types.str;
        description = "Task-specific variables";
        default = { };
      };

      env = lib.mkOption {
        type = lib.types.attrsOf lib.types.str;
        description = "Task-specific environment variables";
        default = { };
      };

      silent = lib.mkOption {
        type = lib.types.bool;
        description = "Whether to suppress command output";
        default = false;
      };

      method = lib.mkOption {
        type = lib.types.nullOr (
          lib.types.enum [
            "checksum"
            "timestamp"
            "none"
          ]
        );
        description = "Method used to check if task is up-to-date";
        default = null;
      };

      dir = lib.mkOption {
        type = lib.types.nullOr lib.types.str;
        description = "Directory to run the task in";
        default = null;
      };

      preconditions = lib.mkOption {
        type = lib.types.listOf (
          lib.types.submodule {
            options = {
              sh = lib.mkOption {
                type = lib.types.str;
                description = "Shell command to check";
              };
              msg = lib.mkOption {
                type = lib.types.nullOr lib.types.str;
                description = "Error message if precondition fails";
                default = null;
              };
            };
          }
        );
        description = "Task preconditions";
        default = [ ];
      };
    };
  }
)
